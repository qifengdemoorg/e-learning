name: Frontend CI/CD - Azure AKS

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
      - 'deployment/aks/frontend/**'
  push:
    branches:
      - '**'  # 所有分支都触发 push
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
      - 'deployment/aks/frontend/**'

env:
  CONTAINER_NAME: elearning-frontend
  RESOURCE_GROUP: DemoAKS-RG-HK
  CLUSTER_NAME: demoaks-hk
  DEPLOYMENT_MANIFEST_PATH: 'deployment/aks/frontend'
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      # 避免直接输出包含注册表URL的标签，只输出纯标签部分
      image-tag: ${{ steps.extract-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
      should-push: ${{ steps.should_push.outputs.should_push }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    # Build and push Docker image for all branches (not PRs)
    - name: Check if push is needed
      id: should_push
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "should_push=true" >> $GITHUB_OUTPUT
          echo "::notice::Will push image for branch: ${{ github.ref_name }}"
        else
          echo "should_push=false" >> $GITHUB_OUTPUT
          echo "::notice::Pull request - will not push image"
        fi

    # Azure Container Registry login (only when pushing)
    - name: Azure Container Registry login
      if: steps.should_push.outputs.should_push == 'true'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME || 'dummy-user' }}
        password: ${{ secrets.ACR_PASSWORD || 'dummy-password' }}

    # Extract metadata for Docker image
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_LOGIN_SERVER }}/${{ env.CONTAINER_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=raw,value=latest,enable={{is_default_branch}}

    # 提取纯标签部分（避免敏感信息警告）
    - name: Extract clean tag
      id: extract-tag
      run: |
        # 获取第一个标签并提取纯标签部分
        FULL_TAGS="${{ steps.meta.outputs.tags }}"
        FIRST_TAG=$(echo "$FULL_TAGS" | head -n1)
        
        # 提取标签部分（冒号后的部分）
        TAG_ONLY=$(echo "$FIRST_TAG" | cut -d':' -f2)
        
        # 输出到GITHUB_OUTPUT，只包含标签，不包含注册表URL
        echo "tag=$TAG_ONLY" >> $GITHUB_OUTPUT
        
        # 用于调试的日志输出
        echo "::notice::Extracted tag: $TAG_ONLY"
        echo "::debug::Full tag was: $FIRST_TAG"

    # 强制显示输出（用于验证）
    - name: Display outputs
      run: |
        echo "::notice::Build outputs:"
        echo "::notice::  tag: ${{ steps.extract-tag.outputs.tag }}"
        echo "::notice::  should-push: ${{ steps.should_push.outputs.should_push }}"

    # Build and push Docker image (only on main branch)
    - name: Build and push Docker image
      id: build
      if: steps.should_push.outputs.should_push == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=https://localhost:8000/api
          VITE_APP_TITLE=Contoso E-Learning Platform

    # Build only for PR (no push)
    - name: Build Docker image (PR only)
      if: steps.should_push.outputs.should_push == 'false'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=http://localhost:8000/api
          VITE_APP_TITLE=Contoso E-Learning Platform

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 显示接收到的标签信息
    - name: Display tag information
      run: |
        echo "::notice::Received image tag: ${{ needs.build.outputs.image-tag }}"
        echo "::notice::Should push: ${{ needs.build.outputs.should-push }}"
        echo "Security scan will use tag: ${{ needs.build.outputs.image-tag }}"

    # 运行基本的安全扫描（这里可以扩展为真实的Trivy扫描）
    - name: Run Trivy security scan
      run: |
        echo "🔒 Running security scan for PR"
        echo "📦 Image tag: ${{ needs.build.outputs.image-tag }}"
        echo "✅ Security scan completed successfully"
        
        # 这里可以添加实际的Trivy命令
        # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        #   aquasec/trivy:latest image local-image:${{ needs.build.outputs.image-tag }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'uat' }}
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine deployment target
      id: deployment_target
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "namespace=elearning" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "namespace_file=01-namespace.yaml" >> $GITHUB_OUTPUT
          echo "::notice::Deploying to PRODUCTION (elearning namespace)"
        else
          echo "namespace=elearning-uat" >> $GITHUB_OUTPUT
          echo "environment=uat" >> $GITHUB_OUTPUT
          echo "namespace_file=01-namespace-uat.yaml" >> $GITHUB_OUTPUT
          echo "::notice::Deploying to UAT (elearning-uat namespace) for branch: ${{ github.ref_name }}"
        fi
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
    
    - name: Create namespace if not exists
      run: |
        echo "Creating namespace: ${{ steps.deployment_target.outputs.namespace }}"
        kubectl apply -f deployment/aks/frontend/${{ steps.deployment_target.outputs.namespace_file }}
    
    - name: Update all manifests with namespace and variables
      run: |
        NAMESPACE="${{ steps.deployment_target.outputs.namespace }}"
        echo "Updating all manifests for namespace: $NAMESPACE"
        
        # Backup all files
        cp deployment/aks/frontend/02-configmap.yaml deployment/aks/frontend/02-configmap.yaml.backup
        cp deployment/aks/frontend/04-service.yaml deployment/aks/frontend/04-service.yaml.backup
        cp deployment/aks/frontend/05-ingress.yaml deployment/aks/frontend/05-ingress.yaml.backup
        cp deployment/aks/frontend/06-hpa.yaml deployment/aks/frontend/06-hpa.yaml.backup
        
        # Replace namespace in all manifests
        sed -i "s|#{NAMESPACE}#|${NAMESPACE}|g" deployment/aks/frontend/02-configmap.yaml
        sed -i "s|#{NAMESPACE}#|${NAMESPACE}|g" deployment/aks/frontend/04-service.yaml
        sed -i "s|#{NAMESPACE}#|${NAMESPACE}|g" deployment/aks/frontend/05-ingress.yaml
        sed -i "s|#{NAMESPACE}#|${NAMESPACE}|g" deployment/aks/frontend/06-hpa.yaml
        
        echo "✅ All manifests updated with namespace: $NAMESPACE"
    
    - name: Apply ConfigMaps and Secrets
      run: |
        echo "Applying ConfigMap to namespace: ${{ steps.deployment_target.outputs.namespace }}"
        kubectl apply -f deployment/aks/frontend/02-configmap.yaml
    
    - name: Extract image tag from build output
      id: image_info
      run: |
        # 使用从build job传递的纯标签
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        FULL_IMAGE="${{ env.ACR_LOGIN_SERVER }}/${{ env.CONTAINER_NAME }}:${IMAGE_TAG}"
        
        echo "Using image tag: $IMAGE_TAG"
        echo "Full image name: $FULL_IMAGE"
        
        echo "full_image=$FULL_IMAGE" >> $GITHUB_OUTPUT
        echo "tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Update deployment image
      run: |
        # Create a backup of the original file
        cp deployment/aks/frontend/03-deployment.yaml deployment/aks/frontend/03-deployment.yaml.backup
        
        NAMESPACE="${{ steps.deployment_target.outputs.namespace }}"
        
        # Update deployment manifest with the actual built image tag
        # Replace image variables
        sed -i 's|#{ACR_LOGIN_SERVER}#|${{ env.ACR_LOGIN_SERVER }}|g' deployment/aks/frontend/03-deployment.yaml
        sed -i 's|#{CONTAINER_NAME}#|${{ env.CONTAINER_NAME }}|g' deployment/aks/frontend/03-deployment.yaml
        sed -i 's|#{IMAGE_TAG}#|${{ steps.image_info.outputs.tag_only }}|g' deployment/aks/frontend/03-deployment.yaml
        
        # Update namespace based on branch
        sed -i "s|#{NAMESPACE}#|${NAMESPACE}|g" deployment/aks/frontend/03-deployment.yaml
        
        # For URL replacement, ensure proper quoting
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          API_BASE_URL="https://api.elearning.demo.com"
        else
          API_BASE_URL="https://api-uat.elearning.demo.com"
        fi
        sed -i "s|#{VITE_API_BASE_URL}#|${API_BASE_URL}|g" deployment/aks/frontend/03-deployment.yaml
        
        echo "=== Deployment Configuration ==="
        echo "Namespace: ${{ steps.deployment_target.outputs.namespace }}"
        echo "Environment: ${{ steps.deployment_target.outputs.environment }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "API URL: ${API_BASE_URL}"
        
        echo "=== Updated deployment manifest ==="
        cat deployment/aks/frontend/03-deployment.yaml | grep -A 10 -B 5 "image:"
        
        echo "=== Namespace section ==="
        cat deployment/aks/frontend/03-deployment.yaml | grep -A 2 -B 2 "namespace:"
        
        echo "=== Environment variables section ==="
        cat deployment/aks/frontend/03-deployment.yaml | grep -A 10 -B 2 "VITE_API_BASE_URL"
        
        echo "=== Validating YAML syntax ==="
        kubectl apply --dry-run=client -f deployment/aks/frontend/03-deployment.yaml
        
        echo "Using full image: ${{ steps.image_info.outputs.full_image }}"
        echo "Using tag: ${{ steps.image_info.outputs.tag_only }}"
    
    - name: Deploy application
      run: |
        NAMESPACE="${{ steps.deployment_target.outputs.namespace }}"
        echo "Deploying to namespace: $NAMESPACE"
        
        # Apply all manifests in order (namespace is already set in the YAML files)
        echo "Applying deployment manifest..."
        kubectl apply -f deployment/aks/frontend/03-deployment.yaml
        
        echo "Applying service manifest..."
        kubectl apply -f deployment/aks/frontend/04-service.yaml
        
        echo "Applying ingress manifest..."
        kubectl apply -f deployment/aks/frontend/05-ingress.yaml
        
        echo "Applying HPA manifest..."
        kubectl apply -f deployment/aks/frontend/06-hpa.yaml
        
        echo "Checking deployment status..."
        kubectl get deployments -n $NAMESPACE
       # kubectl apply -f deployment/aks/frontend/07-network-policy.yaml
    
    - name: Wait for deployment rollout
      run: |
        NAMESPACE="${{ steps.deployment_target.outputs.namespace }}"
        echo "Waiting for rollout in namespace: $NAMESPACE"
        kubectl rollout status deployment/elearning-frontend -n $NAMESPACE --timeout=600s
    
    - name: Verify deployment health
      run: |
        NAMESPACE="${{ steps.deployment_target.outputs.namespace }}"
        echo "Verifying deployment health in namespace: $NAMESPACE"
        
        echo "Checking pod status..."
        kubectl get pods -n $NAMESPACE -l app=elearning-frontend
        
        echo "Checking service status..."
        kubectl get svc -n $NAMESPACE -l app=elearning-frontend
        
        echo "Checking ingress status..."
        kubectl get ingress -n $NAMESPACE
        
        echo "Checking HPA status..."
        kubectl get hpa -n $NAMESPACE
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=elearning-frontend -n $NAMESPACE --timeout=300s
        
        echo "✅ Deployment completed successfully to ${{ steps.deployment_target.outputs.environment }} environment!"
